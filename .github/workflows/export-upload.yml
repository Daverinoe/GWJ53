name: Deploy Game

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  IS_MAIN: ${{contains(github.ref, 'main')}}
  PROJECT_NAME: "gwj53"
  ITCH_PROJECT_NAME: "gwj53"
  ITCH_USERNAME: "daverinoe"
  GODOT_VERSION: 4.0
  SUB_VERSION: beta12

jobs:
  BuildAndPublish:
    runs-on: ubuntu-latest
    environment: BnP
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3.3.0
        with:
          lfs: true
          fetch-depth: 0
      - name: Download + Authorize Godot
        run: |
          curl -L -o godot.zip https://downloads.tuxfamily.org/godotengine/4.0/beta12/Godot_v4.0-beta12_linux.x86_64.zip
          unzip godot.zip
          mv Godot_v4.0-beta12_linux.x86_64 godot
          ls
          chmod +x godot
      - name: Download Export Templates
        run: |
          curl -L -o export_templates.zip https://downloads.tuxfamily.org/godotengine/4.0/beta12/Godot_v4.0-beta12_export_templates.tpz
          unzip export_templates.zip
      - name: Install Export Templates
        run: |
          mkdir -p ~/.local/share/godot/export_templates/4.0.beta12
          mv ./templates/* ~/.local/share/godot/export_templates/4.0.beta12
      - name: Make Exports Folder
        run: |
          mkdir exports
      - name: Export Windows Port
        run: |
          mkdir ./exports/windows
          ./godot --headless --path ./ --export-release "Windows" ./exports/windows/$PROJECT_NAME.exe
      - name: Export Mac Port
        run: |
          mkdir ./exports/mac
          ./godot --headless --path ./ --export-release "Mac" ./exports/mac/$PROJECT_NAME.zip
      - name: Export Linux Port
        run: |
          mkdir ./exports/linux
          ./godot --headless --path ./ --export-release "Linux" ./exports/linux/$PROJECT_NAME.x86_64
      - name: Export Web Build
        run: |
          mkdir ./exports/web
          ./godot --headless --path ./ --export-release "Web" ./exports/web/index.html
      - name: Publish Export Artifact
        uses: actions/upload-artifact@v2
        with:
          name: exports
          path: exports
  CreateNewGithubRelease:
    needs: BuildAndPublish
    if: ${{ contains(github.ref, 'main') }}
    runs-on: ubuntu-latest
    environment: BnP
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      - name: Download Exports
        uses: actions/download-artifact@v3.0.2
        with:
          name: exports
          path: exports
      - name: Zip Exports
        run: zip -r exports.zip exports
      - name: Test Release Variables
        run: |
          echo "Version Number $GITHUB_RUN_NUMBER"
          echo "Commit Message $COMMIT_MESSAGE"
          echo "Project Name $PROJECT_NAME"
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      - name: Create New Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ github.run_id }}
          release_name: Release ${{ github.run_id }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: Upload Exports
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./exports.zip
          asset_name: exports.zip
          asset_content_type: application/zip
      - name: Update Minor Version
        run: |
          echo 
  PushExportsToItch:
    needs: BuildAndPublish
    if: ${{ contains(github.ref, 'main') }}
    runs-on: ubuntu-latest
    environment: BnP
    env:
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
    steps:
      - name: Download Exports
        uses: actions/download-artifact@v3.0.2
        with:
          name: exports
          path: exports
      - name: Download + Authorize Butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - name: Login To Butler
        run: ./butler login
      - name: Push Windows Export To Itch
        run: ./butler push ./exports/windows/ $ITCH_USERNAME/$ITCH_PROJECT_NAME:win
      - name: Push Mac Export To Itch
        run: ./butler push ./exports/mac/ $ITCH_USERNAME/$ITCH_PROJECT_NAME:mac
      - name: Push Linux Export To Itch
        run: ./butler push ./exports/linux/ $ITCH_USERNAME/$ITCH_PROJECT_NAME:linux
      - name: Push Web Export To Itch
        run: ./butler push ./exports/web/ $ITCH_USERNAME/$ITCH_PROJECT_NAME:html5
  AlertPipelineResult:
    needs: [BuildAndPublish, CreateNewGithubRelease, PushExportsToItch]
    if: ${{ always() }}
    environment: BnP
    env:
      DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}}
      DID_PREV_JOBS_SUCCEED: ${{ contains(needs.BuildAndPublish.result, 'success' ) && contains(needs.CreateNewGithubRelease.result, 'success' ) && contains(needs.PushExportsToItch.result, 'success' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Success Message
        run: |
          curl --location --request POST $DISCORD_WEBHOOK \
            --header 'Content-Type: application/json' \
            --data-raw "{\"content\": \"Build and publish: needs.BuildAndPublish.result\nGithub release: needs.CreateNewGithubRelease.result\nPush to Itch: needs.PushExportsToItch.result\"}"
